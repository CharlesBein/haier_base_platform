<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        ">
    <context:component-scan base-package="cn.gooday.logistics.*" />
	<!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射-->
    <mvc:annotation-driven />

    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
    <bean id="mappingJackson2HttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
        <property name="objectMapper">
            <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                <property name="dateFormat">
                    <bean class="java.text.SimpleDateFormat">
                        <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"></constructor-arg>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

	<!-- 视图解释类 -->
    <bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/page/" />
		<property name="suffix" value=".htm" />
		<property name="order" value="0" />
	</bean>
	
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
	</bean>
	
	
	<bean id="stringHttpMessageConverter"
        class="org.springframework.http.converter.StringHttpMessageConverter">
        <constructor-arg value="UTF-8" index="0"></constructor-arg>
        <!--避免出现乱码 -->
        <property name="supportedMediaTypes">
        <list>
            <value>text/plain;charset=UTF-8</value>
        </list>
    </property>
    </bean>

	<!--&lt;!&ndash; 对静态资源文件的访问 方案二 （二选一） &ndash;&gt;-->
	<!--<mvc:resources mapping="/images/**" location="/resource/images/"-->
		<!--cache-period="31556926" />-->
	<!--<mvc:resources mapping="/js/**" location="/resource/js/"-->
		<!--cache-period="31556926" />-->
	<!--<mvc:resources mapping="/css/**" location="/resource/css/"-->
		<!--cache-period="31556926" />-->

	<!-- 使用springMVC进行系统实现时，springMVC默认的解析器里面是没有加入对文件上传的解析的，这可以方便我们实现自己的文件上传。 
		但如果你想使用springMVC对文件上传的解析器来处理文件上传的时候就需要在spring的applicationContext里面加上springMVC 
		提供的MultipartResolver的申明。这样之后，客户端每次进行请求的时候，springMVC都会检查request里面是否包含多媒体信息， 
		如果包含了就会使用MultipartResolver进行解析,springMVC会使用一个支持文件处理的MultipartHttpServletRequest 
		来包裹当前的HttpServletRequest，然后使用MultipartHttpServletRequest就可以对文件进行处理了 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

	<!-- <mvc:interceptors>
		使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求
		定义在此
		<bean id="sessionCheckInterceptor" class="com.kd.mvc.interceptor.SessionCheckInterceptor"></bean>
		<mvc:interceptor> 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 <mvc:mapping 
			path="/loginController/downFile" /> </mvc:interceptor>
	</mvc:interceptors> -->
	

</beans>